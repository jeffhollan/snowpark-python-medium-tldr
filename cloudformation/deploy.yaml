# yaml-language-server: $schema=./deploy.yaml
# aws cloudformation deploy --template-file ./cloudformation/deploy.yaml --stack-name external-function --parameter-override apiGatewayIAMRoleName=apigatewayExternalRole lambdaExecutionRoleName=lambdaExternalRole --capabilities CAPABILITY_NAMED_IAM
AWSTemplateFormatVersion: "2010-09-09"
Description: "Template for creating API Gateway and Lambda function for Snowflake external functions"

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[-a-z0-9]+$"
    Default: "ext-func-stage"
    Description: "API deployment stage"

  lambdaName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "ext-func-lambda"
    Description: "Lambda instance name"

  apiGatewayType:
    Type: "String"
    Default: "REGIONAL"
    AllowedValues:
      - "REGIONAL"
      - "PRIVATE"
    Description: "API Gateway type to create"

  apiGatewayName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "ext-func-api"
    Description: "API Gateway instance name"

  apiGatewayIAMRoleName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Description: "Role used with Snowflake API Integration"

  lambdaExecutionRoleName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Description: "Role used by the Lambda."

  sourceVpcId:
    Type: "String"
    Default: ""
    Description: "Snowflake VPC that has access to private API Gateway. Used only when creating a private API Gateway"

Conditions:
  shouldCreateRegionalGateway: !Equals [!Ref apiGatewayType, "REGIONAL"]

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    DependsOn: apiIAMRole
    Properties:
      Name: !Ref "apiGatewayName"
      Description: "Snowflake external functions Gateway"
      Policy: !Sub
        - '{ "Version": "2012-10-17", "Statement": [ {  "Effect": "Allow", "Principal": { "AWS": "arn:aws:sts::${AWS::AccountId}:assumed-role/${apiGatewayIAMRoleName}/snowflake" }, "Action": "execute-api:Invoke", "Resource": "${resourceArn}" , "Condition": { ${vpcCondition} } } ] }'
        - resourceArn: !Join ["", ["execute-api:/", "*"]]
          vpcCondition: !If
            - shouldCreateRegionalGateway
            - ""
            - !Sub '"StringEquals": { "aws:sourceVpc": "${sourceVpcId}"}'
      EndpointConfiguration:
        Types:
          - !Ref apiGatewayType

  apiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: echo

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "apiResource"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn: lambdaExecutionIAMRole
    Properties:
      Code:
        ImageUri: "myImage"
      Architectures:
        - x86_64
      Description: "Docker Container package sample"
      PackageType: Image
      FunctionName: !Ref "lambdaName"
      Handler: "lambda.handler"
      Role: !GetAtt "lambdaExecutionIAMRole.Arn"
      Timeout: 600

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"

  apiIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref "apiGatewayIAMRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"

  lambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref "lambdaExecutionRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  resourceInvocationUrl:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/echo"

  awsRoleArn:
    Value: !GetAtt "apiIAMRole.Arn"
